// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  name        String?
  avatar      String?
  bio         String?
  level       UserLevel @default(RECRUIT)
  xp          Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relações
  posts       Post[]
  comments    Comment[]
  reactions   Reaction[]
  userMissions UserMission[]
  userBadges  UserBadge[]
  
  @@map("users")
}

model Post {
  id          String   @id @default(cuid())
  title       String
  content     String
  area        PostArea
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relações
  comments    Comment[]
  reactions   Reaction[]
  
  @@map("posts")
}

model Comment {
  id          String   @id @default(cuid())
  content     String
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  post        Post     @relation(fields: [postId], references: [id])
  postId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relação com Reaction (corrigida)
  reactions   Reaction[]
  
  @@map("comments")
}

model Reaction {
  id          String   @id @default(cuid())
  type        ReactionType
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  post        Post?    @relation(fields: [postId], references: [id])
  postId      String?
  comment     Comment? @relation(fields: [commentId], references: [id])
  commentId   String?
  createdAt   DateTime @default(now())
  
  @@unique([userId, postId, commentId])
  @@map("reactions")
}

model Mission {
  id          String   @id @default(cuid())
  title       String
  description String
  xpReward    Int
  area        PostArea
  createdAt   DateTime @default(now())
  
  userMissions UserMission[]
  
  @@map("missions")
}

model UserMission {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  mission     Mission  @relation(fields: [missionId], references: [id])
  missionId   String
  completed   Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  
  @@unique([userId, missionId])
  @@map("user_missions")
}

model Badge {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  rarity      BadgeRarity @default(COMMON)
  
  userBadges  UserBadge[]
  
  @@map("badges")
}

model UserBadge {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  badge       Badge    @relation(fields: [badgeId], references: [id])
  badgeId     String
  earnedAt    DateTime @default(now())
  
  @@unique([userId, badgeId])
  @@map("user_badges")
}

// Enums
enum UserLevel {
  RECRUIT
  OPERATOR
  AGENT
  MASTER
}

enum PostArea {
  ARSENAL
  CINEMATECA
  MAPA
  FORUM
  BIBLIOGRAFIA
}

enum ReactionType {
  LIKE
  INSIGHT
  DISAGREE
  BOOST
}

enum BadgeRarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
}
