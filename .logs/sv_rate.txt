# MP-D.recheck (case-insensitive)
NO_RATE_LIMIT_FOUND
NO_ADMIN_LOGGING_HOOKS
# MP-D.files HEADS
== middleware.ts ==
     1	import { NextResponse } from 'next/server';
     2	import type { NextRequest } from 'next/server';
     3	const WINDOW_MS = 10_000;
     4	const LIMIT = 30;
     5	const store: Record<string, { ts: number; count: number }> = {};
     6	
     7	export function middleware(req: NextRequest) {
     8	  const ip = req.ip ?? req.headers.get('x-forwarded-for') ?? 'unknown';
     9	  const now = Date.now();
    10	  const k = String(ip);
    11	  const entry = store[k] ?? { ts: now, count: 0 };
    12	  if (now - entry.ts > WINDOW_MS) { entry.ts = now; entry.count = 0; }
    13	  entry.count += 1; store[k] = entry;
    14	
    15	  if (entry.count > LIMIT) {
    16	    console.log('[RATE-LIMIT]', k, entry.count);
    17	    return new NextResponse('Too Many Requests', { status: 429, headers: { 'X-RateLimit-Window': String(WINDOW_MS), 'X-RateLimit-Limit': String(LIMIT) }});
    18	  }
    19	  return NextResponse.next();
    20	}
    21	
    22	export const config = {
    23	  matcher: ['/((?!_next/static|_next/image|favicon.ico).*)'],
    24	};
== utils/logger.ts ==
     1	export const adminLog = (...args: any[]) => {
     2	  try { console.log('[ADMIN]', ...args); } catch {}
     3	}
== app/api/admin/log-test/route.ts ==
     1	import { NextResponse } from 'next/server';
     2	import { adminLog } from '../../../../utils/logger';
     3	export async function GET() {
     4	  adminLog('log-test ok', new Date().toISOString());
     5	  return NextResponse.json({ ok: true });
     6	}
== sanity greps ==
16:    console.log('[RATE-LIMIT]', k, entry.count);
utils/logger.ts:1:export const adminLog = (...args: any[]) => {
utils/logger.ts:2:  try { console.log('[ADMIN]', ...args); } catch {}
app/api/admin/log-test/route.ts:2:import { adminLog } from '../../../../utils/logger';
app/api/admin/log-test/route.ts:4:  adminLog('log-test ok', new Date().toISOString());
# MP-D.recheckE
middleware.ts:16:    console.log('[RATE-LIMIT]', k, entry.count);
middleware.ts:17:    return new NextResponse('Too Many Requests', { status: 429, headers: { 'X-RateLimit-Window': String(WINDOW_MS), 'X-RateLimit-Limit': String(LIMIT) }});
NO_RATE_LIMIT_FOUND
middleware.ts:16:    console.log('[RATE-LIMIT]', k, entry.count);
app/api/admin/log-test/route.ts:2:import { adminLog } from '../../../../utils/logger';
app/api/admin/log-test/route.ts:4:  adminLog('log-test ok', new Date().toISOString());
utils/logger.ts:1:export const adminLog = (...args: any[]) => {
utils/logger.ts:2:  try { console.log('[ADMIN]', ...args); } catch {}
NO_ADMIN_LOGGING_HOOKS
# MP-D.relint (robust)
## RATE-LIMIT scan
16:    console.log('[RATE-LIMIT]', k, entry.count);
17:    return new NextResponse('Too Many Requests', { status: 429, headers: { 'X-RateLimit-Window': String(WINDOW_MS), 'X-RateLimit-Limit': String(LIMIT) }});
## ADMIN LOG scan (logger file)
1:export const adminLog = (...args: any[]) => {
2:  try { console.log('[ADMIN]', ...args); } catch {}
## ADMIN LOG scan (route usage)
2:import { adminLog } from '../../../../utils/logger';
4:  adminLog('log-test ok', new Date().toISOString());
